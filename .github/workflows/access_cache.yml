name: Access Cached MAST Files

on:
  workflow_dispatch:
    inputs:
      uris:
        description: 'List of files to download (comma-separated in format mission:filename)'
        required: false
        default: 'hlsp:hlsp_jades_jwst_nirspec_goods-n-mediumhst-00000804_clear-prism_v1.0_s2d.fits,
                  hst:hst_17183_02_wfc3_uvis_g280_iexr02mt_flt.fits,
                  jwst:jw02732004001_02103_00004_mirifushort_s3d.fits'
        type: string

jobs:
  access-cache:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install astroquery

    - name: Get components for cache key
      id: date
      run: |
        echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
        echo "week=$(date +'%V')" >> $GITHUB_OUTPUT
        echo "day=$(date +'%j')" >> $GITHUB_OUTPUT

    - name: Restore cache
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ./
        key: use-restore-keys-below-to-match-in-priority-order
        restore-keys: |
          mast-cache-override-
          mast-cache-${{ steps.date.outputs.year }}-${{ steps.date.outputs.week }}-${{ steps.date.outputs.day }}-
          mast-cache-${{ steps.date.outputs.year }}-${{ steps.date.outputs.week }}-
          mast-cache-${{ steps.date.outputs.year }}-
          mast-cache-

    - name: List files
      run: |
        ls -la || echo "No files found"

    - name: Create astroquery access script
      run: |
        cat > download_script.py << 'EOF'
        import os
        from astroquery.mast import MastMissions, Observations
        
        # Get URIs from environment variable
        uris_input = os.environ.get('URIS')
        uris = [uri.strip() for uri in uris_input.split(',')]
        
        # Initialize MAST missions
        mast = MastMissions()
        mast.mission = 'jwst'

        for i, uri in enumerate(uris):
            mission, uri = uri.split(':')
            full_uri = '_'.join(uri.split('_')[:3])+'/'+uri
            print(f'\nProcessing URI {i+1}/{len(uris)}: {uri}')

            mast.mission = mission
            try:
                mast.download_file(full_uri, local_path='./', cache=True)
            except Exception as e:
                print(f'Error processing {uri}: {e}')

            observations_uri = f'mast:{mission}/product/{full_uri}'
            print(f'\nObservations.download_file {observations_uri}')
            try:
                Observations.download_file(observations_uri, local_path='./', cache=True)
            except Exception as e:
                print(f'Error downloading {observations_uri}: {e}')

        print('\nDownload process completed!')
        EOF

    - name: Run access script
      run: |
        python download_script.py
      env:
        URIS: ${{ inputs.uris }}